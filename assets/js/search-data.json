{
  
    
        "post0": {
            "title": "Sizing figures for publications (in progress)",
            "content": "Motivation . Making figures is a crucial know-how for displaying scientific results. Of all figures that I make: . 90 % are for &quot;my eyes only&quot;, and I use them to explore and understand data. These figures are often impossible to decypher for anyone else because so many curves are overlapped. And this is fine, these figures are just for me. | 10 % will be shared &quot;informally&quot; with close colleages to discuss results with them in the lab. There I pay attention to clean the figures and keep only the curves that I want to discuss. I start to write correct labels for the axis and put legends. | 1 % will be shared &quot;formally&quot; during team meetings. Attention to small details are necessary: axis labels are not an option, not too ugly colors and crazy sizes. | 0.01 % will reach the scientific community through poster session, oral presentation, papers and a thesis. These figures are the jewels of ones own work! Here I will check the smallest details such as that the fontsize of labels matches the fontsize of the main text, that the font follows the journal requirement, that the figure resolution is high enough for printing or zooming in... | . Today Python&#39;s club is about the 0.01 % which require a good understanding of physical size of the figure and its elements (line, point, numbers, labels). . The goal is to be able to choose the correct fontsize in powerpoint, or linewidth in matplotlib to produce publication-ready figures. . Figure size: know your physical support . The overall size of a figure can change by as much as four-fold depending on the support of your scientific publication: . a two-column A4 paper: for example, Physical Review Letters of the APS (American Physical Society) will rescale your figure to a width of 8.6 cm to match the column width (see guidelines). | a single-column PhD thesis | a slide for an oral presentation | an A0 poster | . So the first question to investigate is: what is the width (and height) allocated to the figure? I then recommend to keep this size across the various software used to make a figure (powerpoint, Adobe Illustrator, matplotlib, ...) to avoid issues associated to resizing (see later). . Figure elements . Once the figure size is fixed, we can turn our attention to the size of its various elements: . the fontsize of characters and numerals: labels, axis values, legend, title... | the width of line and marker for the data | the width of the axis, grid, legend box, error bars, ... | . The APS provides the following guidelines inviting us to prepare figures with: . the smallest numerical/capital characeter larger than 2 mm | the diameter of data points larger than 1 mm | the thickness of lines larger than 0.2 mm | . We can be deeply grateful to the APS for promoting the use of the international metric system 😊👌. However, this noble gesture is quickly confronted to the issue that most software (including python heart) speaks the ugly language of inch and typography point (the pt is 12pt fontsize)! . Let&#39;s dive into this topic with the aim of choosing a correct fontsize in powerpoint, or linewidth in matplotlib to produce publication-ready figures. . Units conversion . 1 inch = 25.4 mm | 1 point = 1/72 inch $ sim$ 0.35 mm | . See the wikipedia article on typographic point) for more information about the history of the point in typography. . With this, we can already . import matplotlib.pyplot as plt ratio = 4.8/6.4 mm = 1./25.4 plt.figure(figsize = (86*mm, 86*mm*ratio)) plt.plot([0,0],[0,1],&#39;o-&#39;,markersize = 3, linewidth = 0.5) plt.xlabel(&#39;My x label&#39;, fontsize = 10) plt.savefig(&#39;myfigure_for_paper.png&#39;) plt.show() . plt.figure(figsize = (6,4)) plt.plot([0],[1]) plt.show() . 25.4/72 . 0.35277777777777775 . 1/0.35 . 2.857142857142857 .",
            "url": "http://pythonclub.sylvaindldk.fr/matplotlib/typography/figure/2021/09/22/Sizing-figures.html",
            "relUrl": "/matplotlib/typography/figure/2021/09/22/Sizing-figures.html",
            "date": " • Sep 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Broadcasting in numpy",
            "content": "Tutorial . Broadcasting tutorial by numpy . Example . We want to simulate the effect of noise on some process. Let us take a simple oscillation $P(x) = sin(2 pi times x)$ where the variable $x$ is affected by some Gaussian noise with a deviation-to-mean $ sigma_x/ bar{x} = 10 , %$. . The loopy way . A naive implementation would rely on for loops to perform the calculation. . import numpy as np import matplotlib.pyplot as plt def simu_loopy(): N_x = 100 N_noise = 50 x_list = np.linspace(0,5,N_x) P_list = [] for x in x_list: P = 0 for _ in range(N_noise): x_noise = np.random.normal(loc = x, scale = 0.1 * x) P += np.sin(2*np.pi * x_noise) P_list.append(P/N_noise) return x_list, P_list x, P = simu_loopy() plt.plot(x,P) plt.show() . Let&#39;s check the execution time... . %timeit simu_loopy() . 17.7 ms ± 180 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . The numpy beginner . A better implementation would make use of the size parameter of the np.random.normal function to generate an array containing N_noise samples and perform calculation on this array, thus removing the inner loop. . import numpy as np import matplotlib.pyplot as plt def simu_numpy_beginner(): N_x = 100 N_noise = 50 x_list = np.linspace(0,5,N_x) P_list = [] for x in x_list: x_noise = np.random.normal(loc = x, scale = 0.1 * x, size = N_noise) P_noise = np.sin(2*np.pi * x_noise) P_avg = np.mean(P_noise) P_list.append(P_avg) return x_list, P_list x, P = simu_numpy_beginner() plt.plot(x,P) plt.show() . This is already much faster! . %timeit simu_numpy_beginner() . 1.49 ms ± 18.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . The numpy aware solution . We now use the concept of broadcasting to remove the last loop. . import numpy as np import matplotlib.pyplot as plt def simu_numpy_aware(): N_x = 100 N_noise = 50 x_list = np.linspace(0,5,N_x) noise = np.random.normal(loc = 0, scale = 0.1, size = N_noise) # Some intriguing reshaping ... x_list = x_list.reshape((N_x,1)) #the first dimension is the mean x noise = noise.reshape((1,N_noise)) #the second dimension is the noise # ... allowing the broadcasting operation ! x_noise = x_list * (1 + noise) #we are multiplying a (N_x, 1) and (1, N_noise) arrays # The rest is standard P_noise = np.sin(2*np.pi * x_noise) P_avg = np.mean(P_noise,axis = 1) # average only along the axis representing noise return x_list, P_avg x, P = simu_numpy_aware() plt.plot(x,P) plt.show() . Some timing demonstrates a lightspeed efficiency: 100 times faster than our naive implementation! . %timeit simu_numpy_aware() . 110 µs ± 990 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each) . On the importance of sampling noise . But why is the curve now so smooth compared to the previous implementations? And why is it a strangely distorted sinusoid? . The spiky curves in the first two implementations have to do with the limited sampling of the noise process ($N_{ rm noise} = 50$) in the calculations, and would be attenuated by increasing $N_{ rm noise}$. But then why is it absent when using the broadcasting technique? . This is because the noise becomes common for all values of x with this technique. . Because the execution time is so fast, we can easily increase the sampling of noise and, as shown below, we recover the expected damped sinusoid. . import numpy as np import matplotlib.pyplot as plt def simu_numpy_aware(): N_x = 100 N_noise = 500 x_list = np.linspace(0,5,N_x) noise = np.random.normal(loc = 0, scale = 0.1, size = N_noise) # Some intriguing reshaping ... x_list = x_list.reshape((N_x,1)) #the first dimension is the mean x noise = noise.reshape((1,N_noise)) #the second dimension is the noise # ... allowing the broadcasting operation ! x_noise = x_list * (1 + noise) #we are multiplying a (N_x, 1) and (1, N_noise) arrays # The rest is standard P_noise = np.sin(2*np.pi * x_noise) P_avg = np.mean(P_noise,axis = 1) # average only along the axis representing noise return x_list, P_avg x, P = simu_numpy_aware() plt.plot(x,P) plt.show() .",
            "url": "http://pythonclub.sylvaindldk.fr/numpy/array/broadcast/2021/09/15/Broadcast-in-numpy.html",
            "relUrl": "/numpy/array/broadcast/2021/09/15/Broadcast-in-numpy.html",
            "date": " • Sep 15, 2021"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "Creating the Python Club website",
            "content": "Birth of the Python Club website . The goal is to set up a simple website, in the form of a blog, to keep tracks of the various subjects that we discuss at our weekly Python club. . A beginner-friendly solution would be to use the Google Sites graphical-user interface to generate the site and add contents. This is convenient for any static websites where you want to present yourself (CV, lists of projects, …) or your research group / company. . For our Python club, I preferred a slightly more tech-savvy approach based on GitHub Pages and the fastpages project. I was attracted to this solution by the prospect of effortlessly transforming the Jupyter notebooks used for our club presentations into html contents. . From Jupyter notebooks to html contents . What we produce in the Python club are Jupyter notebooks, which are JSON-formatted files. To display the notebooks on this blog, we need to convert these files into html and host the contents to be publicly available on the web. All these daunting tasks are going to be performed freely by: . GitHub pages | Jekyll | fastpages | . The idea, explained in fastpages website, is as follows. . GitHub Pages hosts the contents of our website as a GitHub repository (check our repo) and will send it to any Pythonistas wishing to access our website through their web-browser at https://SylvainDLDK.github.io/PythonClub. . When we add a new notebook to the repository, a workflow designed by the pastpages project is automatically started as a GitHub Action. This will first convert the notebooks into a markdown file (using nbdev), and then run a Jekyll script to transform it in a website. . Finally, and this is optionnal, I decided to buy myself a domain name and use it to refer to the Python Club instead of using the GitHub domain name (github.io). There are many providers of domain names, I used Google Domains to buy sylvaindldk.fr for ~1000 Yen/year. The .jp version was 4 times more expensive! For some reason, the .jp Top-Level Domain (like .fr, .com, .jp) is much more expensive than the .com or .fr. I was perfectly happy with the cheaper French .fr. . After tweeking a few settings, you can now also access the Python Club at https://pythonclub.sylvaindldk.fr. . Adding blog posts in practice . Just add your jupyter .ipynb notebooks into the /_notebooks folder, your word .doc files into the /_word folder, and your markdown .md files in /_posts. Follow the naming and front matter convention described here and there. .",
            "url": "http://pythonclub.sylvaindldk.fr/github/fastpages/2021/09/01/Creating-a-website.html",
            "relUrl": "/github/fastpages/2021/09/01/Creating-a-website.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Spherical Harmonics",
            "content": "scipy.special.sph_harm . %pylab from scipy.special import sph_harm . Using matplotlib backend: Qt5Agg Populating the interactive namespace from numpy and matplotlib . phi = np.linspace(0,np.pi,100) dphi = phi[1]-phi[0] theta = np.linspace(0,2*np.pi,100) dtheta = theta[1]-theta[0] PHI, THETA = np.meshgrid(phi,theta) Y_11 = sph_harm(1,1,THETA,PHI) Y_10 = sph_harm(0,1,THETA,PHI) Y_1p1 = sph_harm(-1,1,THETA,PHI) Y_22 = sph_harm(2,2,THETA,PHI) Y_21 = sph_harm(1,2,THETA,PHI) Y_20 = sph_harm(0,2,THETA,PHI) . Integral as a discrete sum . In non-cartesian coordinates, be aware of: . ds = dx dy ds = dr rdθ . dV = dx dy dz dV = r^2 sin θ dr dθ dϕ . dΩ = sin θ dθ dϕ . np.sum(Y_11*Y_11*np.conj(Y_22)*np.sin(PHI)*dtheta*dphi) . (0.3121407693092947+1.4301202117769685e-18j) . np.sum(Y_11*np.conj(Y_10)*np.sin(PHI)*dtheta*dphi) . (-1.0842021724855044e-18+1.0842021724855044e-18j) .",
            "url": "http://pythonclub.sylvaindldk.fr/scipy/2021/08/26/Spherical-harmonics.html",
            "relUrl": "/scipy/2021/08/26/Spherical-harmonics.html",
            "date": " • Aug 26, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Our weekly Python Club is held every Wednesday from 1:30 to 2:30, either on Zoom or live. .",
          "url": "http://pythonclub.sylvaindldk.fr/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://pythonclub.sylvaindldk.fr/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}