{
  
    
        "post0": {
            "title": "Broadcasting in numpy",
            "content": "Tutorial . Broadcasting tutorial by numpy . Example . We want to simulate the effect of noise on some process. Let us take a simple oscillation $P(x) = sin(2 pi times x)$ where the variable $x$ is affected by some Gaussian noise with a deviation-to-mean $ sigma_x/ bar{x} = 10 , %$. . The loopy way . A naive implementation would rely on for loops to perform the calculation. . import numpy as np import matplotlib.pyplot as plt def simu_loopy(): N_x = 100 N_noise = 50 x_list = np.linspace(0,5,N_x) P_list = [] for x in x_list: P = 0 for _ in range(N_noise): x_noise = np.random.normal(loc = x, scale = 0.1 * x) P += np.sin(2*np.pi * x_noise) P_list.append(P/N_noise) return x_list, P_list x, P = simu_loopy() plt.plot(x,P) plt.show() . Let&#39;s check the execution time... . %timeit simu_loopy() . 17.7 ms ± 180 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . The numpy beginner . A better implementation would make use of the size parameter of the np.random.normal function to generate an array containing N_noise samples and perform calculation on this array, thus removing the inner loop. . import numpy as np import matplotlib.pyplot as plt def simu_numpy_beginner(): N_x = 100 N_noise = 50 x_list = np.linspace(0,5,N_x) P_list = [] for x in x_list: x_noise = np.random.normal(loc = x, scale = 0.1 * x, size = N_noise) P_noise = np.sin(2*np.pi * x_noise) P_avg = np.mean(P_noise) P_list.append(P_avg) return x_list, P_list x, P = simu_numpy_beginner() plt.plot(x,P) plt.show() . This is already much faster! . %timeit simu_numpy_beginner() . 1.49 ms ± 18.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . The numpy aware solution . We know use the concept of broadcasting to remove the last loop. . import numpy as np import matplotlib.pyplot as plt def simu_numpy_aware(): N_x = 100 N_noise = 50 x_list = np.linspace(0,5,N_x) noise = np.random.normal(loc = 0, scale = 0.1, size = N_noise) # Some intriguing reshaping ... x_list = x_list.reshape((N_x,1)) #the first dimension is the mean x noise = noise.reshape((1,N_noise)) #the second dimension is the noise # ... allowing the broadcasting operation ! x_noise = x_list * (1 + noise) #we are multiplying a (N_x, 1) and (1, N_noise) arrays # The rest is standard P_noise = np.sin(2*np.pi * x_noise) P_avg = np.mean(P_noise,axis = 1) # average only along the axis representing noise return x_list, P_avg x, P = simu_numpy_aware() plt.plot(x,P) plt.show() . Some timing demonstrates a lightspeed efficiency: 100 times faster than our naive implementation! . %timeit simu_numpy_aware() . 110 µs ± 990 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each) . On the importance of sufficient sampling . But why is the curve now so smooth compared to the previous implementations? And why is it a strangely distorted sinusoid? . The spiky curves in the first two implementations have to do with the limited sampling of the noise process ($N_x = 50$) in the calculations, and would be attenuated by increasing $N_x$. But then why is it absent when using the broadcasting technique? . This is because the noise becomes common for all values of x. . Because the execution time is so fast, we can easily increase the sampling of noise and, as shown below, we recover the expected damped sinusoid. . import numpy as np import matplotlib.pyplot as plt def simu_numpy_aware(): N_x = 100 N_noise = 500 x_list = np.linspace(0,5,N_x) noise = np.random.normal(loc = 0, scale = 0.1, size = N_noise) # Some intriguing reshaping ... x_list = x_list.reshape((N_x,1)) #the first dimension is the mean x noise = noise.reshape((1,N_noise)) #the second dimension is the noise # ... allowing the broadcasting operation ! x_noise = x_list * (1 + noise) #we are multiplying a (N_x, 1) and (1, N_noise) arrays # The rest is standard P_noise = np.sin(2*np.pi * x_noise) P_avg = np.mean(P_noise,axis = 1) # average only along the axis representing noise return x_list, P_avg x, P = simu_numpy_aware() plt.plot(x,P) plt.show() .",
            "url": "http://pythonclub.sylvaindldk.fr/numpy/array/broadcast/2021/09/22/Broadcast-in-numpy.html",
            "relUrl": "/numpy/array/broadcast/2021/09/22/Broadcast-in-numpy.html",
            "date": " • Sep 22, 2021"
        }
        
    
  
    
  
    
        ,"post2": {
            "title": "Creating the Python Club website",
            "content": "Birth of the Python Club website . The goal is to set up a simple website, in the form of a blog, to keep tracks of the various subjects that we discuss at our weekly Python club. . A beginner-friendly solution would be to use the Google Sites graphical-user interface to generate the site and add contents. This is convenient for any static websites where you want to present yourself (CV, lists of projects, …) or your research group / company. . For our Python club, I preferred a slightly more tech-savvy approach based on GitHub Pages and the fastpages project. I was attracted to this solution by the prospect of effortlessly transforming the Jupyter notebooks used for our club presentations into html contents. . From Jupyter notebooks to html contents . What we produce in the Python club are Jupyter notebooks, which are JSON-formatted files. To display the notebooks on this blog, we need to convert these files into html and host the contents to be publicly available on the web. All these daunting tasks are going to be performed freely by: . GitHub pages | Jekyll | fastpages | . The idea, explained in fastpages website, is as follows. . GitHub Pages hosts the contents of our website as a GitHub repository (check our repo) and will send it to any Pythonistas wishing to access our website through their web-browser at https://SylvainDLDK.github.io/PythonClub. . When we add a new notebook to the repository, a workflow designed by the pastpages project is automatically started as a GitHub Action. This will first convert the notebooks into a markdown file (using nbdev), and then run a Jekyll script to transform it in a website. . Finally, and this is optionnal, I decided to buy myself a domain name and use it to refer to the Python Club instead of using the GitHub domain name (github.io). There are many providers of domain names, I used Google Domains to buy sylvaindldk.fr for ~1000 Yen/year. The .jp version was 4 times more expensive! For some reason, the .jp Top-Level Domain (like .fr, .com, .jp) is much more expensive than the .com or .fr. I was perfectly happy with the cheaper French .fr. . After tweeking a few settings, you can now also access the Python Club at https://pythonclub.sylvaindldk.fr. . Adding blog posts in practice . Just add your jupyter .ipynb notebooks into the /_notebooks folder, your word .doc files into the /_word folder, and your markdown .md files in /_posts. Follow the naming and front matter convention described here and there. .",
            "url": "http://pythonclub.sylvaindldk.fr/github/fastpages/2021/09/01/Creating-a-website.html",
            "relUrl": "/github/fastpages/2021/09/01/Creating-a-website.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Spherical Harmonics",
            "content": "%pylab from scipy.special import sph_harm . Using matplotlib backend: Qt5Agg Populating the interactive namespace from numpy and matplotlib . phi = np.linspace(0,np.pi,100) dphi = phi[1]-phi[0] theta = np.linspace(0,2*np.pi,100) dtheta = theta[1]-theta[0] PHI, THETA = np.meshgrid(phi,theta) Y_11 = sph_harm(1,1,THETA,PHI) Y_10 = sph_harm(0,1,THETA,PHI) Y_1p1 = sph_harm(-1,1,THETA,PHI) Y_22 = sph_harm(2,2,THETA,PHI) Y_21 = sph_harm(1,2,THETA,PHI) Y_20 = sph_harm(0,2,THETA,PHI) . np.sum(Y_11*Y_11*np.conj(Y_22)*np.sin(PHI)*dtheta*dphi) . (0.3121407693092947+1.4301202117769685e-18j) . np.sum(Y_11*np.conj(Y_10)*np.sin(PHI)*dtheta*dphi) . (-1.0842021724855044e-18+1.0842021724855044e-18j) . ds = dx dy ds = dr rdθ dV = dx dy dz dV = r^2 sin θ dr dθ dϕ dΩ = sin θ dθ dϕ .",
            "url": "http://pythonclub.sylvaindldk.fr/2021/08/26/Spherical-harmonics.html",
            "relUrl": "/2021/08/26/Spherical-harmonics.html",
            "date": " • Aug 26, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Happynewyear",
            "content": "A test word doc for the Python Club blog .",
            "url": "http://pythonclub.sylvaindldk.fr/2021/01/01/HappyNewYear.html",
            "relUrl": "/2021/01/01/HappyNewYear.html",
            "date": " • Jan 1, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://pythonclub.sylvaindldk.fr/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "http://pythonclub.sylvaindldk.fr/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Our weekly Python Club is held every Wednesday from 1:30 to 2:30, either on Zoom or live. .",
          "url": "http://pythonclub.sylvaindldk.fr/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://pythonclub.sylvaindldk.fr/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}